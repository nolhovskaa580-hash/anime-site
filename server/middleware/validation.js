const Joi = require('joi');
const { HTTP_STATUS, LIMITS, REGEX } = require('../../shared/constants/constants');

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validate = (schema) => {
  return (req, res, next) => {
    console.log('üîç VALIDATION DEBUG - Request body:', req.body);
    console.log('üîç VALIDATION DEBUG - Schema name:', schema._flags?.label || 'unknown');
    
    const { error } = schema.validate(req.body, {
      abortEarly: false, // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏
      allowUnknown: true, // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è
      stripUnknown: true // –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è
    });

    if (error) {
      const errors = error.details.map(detail => ({
        field: detail.path.join('.'),
        message: detail.message
      }));

      console.log('üîç VALIDATION DEBUG - Validation failed:', errors);

      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          details: errors
        }
      });
    }

    console.log('üîç VALIDATION DEBUG - Validation passed');
    next();
  };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
const validateParams = (schema) => {
  return (req, res, next) => {
    const { error } = schema.validate(req.params);

    if (error) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        error: {
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
          details: error.details[0].message
        }
      });
    }

    next();
  };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const validateQuery = (schema) => {
  return (req, res, next) => {
    const { error, value } = schema.validate(req.query, {
      allowUnknown: true,
      stripUnknown: true
    });

    if (error) {
      return res.status(HTTP_STATUS.BAD_REQUEST).json({
        success: false,
        error: {
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
          details: error.details[0].message
        }
      });
    }

    req.query = value;
    next();
  };
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authSchemas = {
  register: Joi.object({
    username: Joi.string()
      .min(LIMITS.USERNAME_MIN_LENGTH)
      .max(LIMITS.USERNAME_MAX_LENGTH)
      .pattern(REGEX.USERNAME)
      .required()
      .messages({
        'string.min': `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${LIMITS.USERNAME_MIN_LENGTH} —Å–∏–º–≤–æ–ª–∞`,
        'string.max': `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.USERNAME_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'string.pattern.base': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è',
        'any.required': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      }),
    
    email: Joi.string()
      .email()
      .required()
      .messages({
        'string.email': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
        'any.required': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    password: Joi.string()
      .min(LIMITS.PASSWORD_MIN_LENGTH)
      .pattern(REGEX.PASSWORD)
      .required()
      .messages({
        'string.min': `–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${LIMITS.PASSWORD_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'string.pattern.base': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
        'any.required': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    confirmPassword: Joi.string()
      .valid(Joi.ref('password'))
      .required()
      .messages({
        'any.only': '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
        'any.required': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      })
  }),

  login: Joi.object({
    email: Joi.string()
      .email()
      .required()
      .messages({
        'string.email': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
        'any.required': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    password: Joi.string()
      .required()
      .messages({
        'any.required': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  }),

  forgotPassword: Joi.object({
    email: Joi.string()
      .email()
      .required()
      .messages({
        'string.email': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
        'any.required': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  }),

  resetPassword: Joi.object({
    token: Joi.string()
      .required()
      .messages({
        'any.required': '–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    password: Joi.string()
      .min(LIMITS.PASSWORD_MIN_LENGTH)
      .pattern(REGEX.PASSWORD)
      .required()
      .messages({
        'string.min': `–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${LIMITS.PASSWORD_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'string.pattern.base': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
        'any.required': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  })
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSchemas = {
  updateProfile: Joi.object({
    username: Joi.string()
      .min(LIMITS.USERNAME_MIN_LENGTH)
      .max(LIMITS.USERNAME_MAX_LENGTH)
      .pattern(REGEX.USERNAME)
      .messages({
        'string.min': `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${LIMITS.USERNAME_MIN_LENGTH} —Å–∏–º–≤–æ–ª–∞`,
        'string.max': `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.USERNAME_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'string.pattern.base': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
      }),
    
    bio: Joi.string()
      .max(LIMITS.BIO_MAX_LENGTH)
      .allow('')
      .messages({
        'string.max': `–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.BIO_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`
      }),
    
    preferences: Joi.object({
      theme: Joi.string().valid('light', 'dark', 'auto'),
      language: Joi.string().valid('ru', 'en'),
      emailNotifications: Joi.boolean(),
      publicProfile: Joi.boolean()
    })
  }),

  changePassword: Joi.object({
    currentPassword: Joi.string()
      .required()
      .messages({
        'any.required': '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    newPassword: Joi.string()
      .min(LIMITS.PASSWORD_MIN_LENGTH)
      .pattern(REGEX.PASSWORD)
      .required()
      .messages({
        'string.min': `–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${LIMITS.PASSWORD_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'string.pattern.base': '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
        'any.required': '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  })
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
const commentSchemas = {
  create: Joi.object({
    content: Joi.string()
      .min(1)
      .max(LIMITS.COMMENT_MAX_LENGTH)
      .required()
      .messages({
        'string.min': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        'string.max': `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.COMMENT_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'any.required': '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      }),
    
    rating: Joi.number()
      .integer()
      .min(LIMITS.MIN_RATING)
      .max(LIMITS.MAX_RATING)
      .messages({
        'number.integer': '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        'number.min': `–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${LIMITS.MIN_RATING} –¥–æ ${LIMITS.MAX_RATING}`,
        'number.max': `–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${LIMITS.MIN_RATING} –¥–æ ${LIMITS.MAX_RATING}`
      }),
    
    parentId: Joi.string()
      .pattern(/^[0-9a-fA-F]{24}$/)
      .messages({
        'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
      }),
    
    episodeNumber: Joi.number()
      .integer()
      .min(1)
      .messages({
        'number.integer': '–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        'number.min': '–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
      }),
    
    tags: Joi.array()
      .items(Joi.string().valid('spoiler', 'review', 'recommendation', 'discussion'))
  }),

  update: Joi.object({
    content: Joi.string()
      .min(1)
      .max(LIMITS.COMMENT_MAX_LENGTH)
      .required()
      .messages({
        'string.min': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        'string.max': `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.COMMENT_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'any.required': '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      })
  }),

  report: Joi.object({
    reason: Joi.string()
      .valid('spam', 'inappropriate', 'harassment', 'spoiler', 'other')
      .required()
      .messages({
        'any.only': '–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã',
        'any.required': '–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      }),
    
    description: Joi.string()
      .max(LIMITS.REPORT_DESCRIPTION_MAX_LENGTH)
      .allow('')
      .messages({
        'string.max': `–û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.REPORT_DESCRIPTION_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`
      })
  })
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
const watchListSchemas = {
  addToList: Joi.object({
    status: Joi.string()
      .valid('watching', 'completed', 'planToWatch', 'dropped', 'onHold')
      .required()
      .messages({
        'any.only': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
        'any.required': '–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    
    rating: Joi.number()
      .integer()
      .min(LIMITS.MIN_RATING)
      .max(LIMITS.MAX_RATING)
      .messages({
        'number.integer': '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        'number.min': `–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${LIMITS.MIN_RATING} –¥–æ ${LIMITS.MAX_RATING}`,
        'number.max': `–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${LIMITS.MIN_RATING} –¥–æ ${LIMITS.MAX_RATING}`
      }),
    
    notes: Joi.string()
      .max(LIMITS.NOTES_MAX_LENGTH)
      .allow('')
      .messages({
        'string.max': `–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.NOTES_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`
      }),
    
    priority: Joi.string()
      .valid('low', 'medium', 'high')
      .messages({
        'any.only': '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
      }),
    
    isPrivate: Joi.boolean()
  }),

  updateProgress: Joi.object({
    episodesWatched: Joi.number()
      .integer()
      .min(0)
      .required()
      .messages({
        'number.integer': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        'number.min': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º',
        'any.required': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      }),
    
    timeWatched: Joi.number()
      .min(0)
      .messages({
        'number.min': '–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
      })
  })
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const paramSchemas = {
  objectId: Joi.object({
    id: Joi.string()
      .pattern(/^[0-9a-fA-F]{24}$/)
      .required()
      .messages({
        'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID',
        'any.required': 'ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  }),

  userId: Joi.object({
    userId: Joi.string()
      .pattern(/^[0-9a-fA-F]{24}$/)
      .required()
      .messages({
        'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'any.required': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  }),

  animeEpisode: Joi.object({
    id: Joi.string()
      .pattern(/^[0-9a-fA-F]{24}$/)
      .required()
      .messages({
        'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–Ω–∏–º–µ',
        'any.required': 'ID –∞–Ω–∏–º–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    episodeId: Joi.string()
      .pattern(/^\d+$/)
      .required()
      .messages({
        'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞',
        'any.required': '–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      })
  })
};

// –°—Ö–µ–º–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–æ–±—ä—è–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫)
const paginationSchema = Joi.object({
  page: Joi.number()
    .integer()
    .min(1)
    .default(1)
    .messages({
      'number.integer': '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
      'number.min': '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
    }),
  
  limit: Joi.number()
    .integer()
    .min(1)
    .max(LIMITS.MAX_PAGE_SIZE)
    .default(LIMITS.DEFAULT_PAGE_SIZE)
    .messages({
      'number.integer': '–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
      'number.min': '–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
      'number.max': `–õ–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${LIMITS.MAX_PAGE_SIZE}`
    })
});

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const querySchemas = {
  pagination: paginationSchema,

  animeSearch: Joi.object({
    q: Joi.string()
      .min(1)
      .max(100)
      .messages({
        'string.min': '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        'string.max': '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤'
      }),
    
    search: Joi.string()
      .min(0)
      .max(100)
      .allow('')
      .optional()
      .messages({
        'string.max': '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤'
      }),
    
    sortBy: Joi.string()
      .valid('title', 'year', 'rating', 'rating.score', 'popularity', 'createdAt')
      .default('rating'),
    
    sortOrder: Joi.string()
      .valid('asc', 'desc')
      .default('desc'),
    
    rating: Joi.string()
      .allow(''),
    
    genres: Joi.alternatives()
      .try(
        Joi.string(),
        Joi.array().items(Joi.string())
      ),
    
    year: Joi.alternatives()
      .try(
        Joi.number().integer().min(1900).max(new Date().getFullYear() + 5),
        Joi.string().allow('')
      )
      .messages({
        'number.integer': '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º',
        'number.min': '–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1900',
        'number.max': '–ì–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º'
      }),
    
    status: Joi.string()
      .valid('Finished Airing', 'Currently Airing', 'Not yet aired')
      .allow(''),
    
    type: Joi.string()
      .valid('TV', 'Movie', 'OVA', 'ONA', 'Special', 'Music')
      .allow(''),
    
    sort: Joi.string()
      .valid('title', 'year', 'rating', 'rating.score', 'popularity', 'createdAt')
      .default('rating'),
    
    order: Joi.string()
      .valid('asc', 'desc')
      .default('desc')
  }).concat(paginationSchema)
};

module.exports = {
  validate,
  validateParams,
  validateQuery,
  authSchemas,
  userSchemas,
  commentSchemas,
  watchListSchemas,
  paramSchemas,
  querySchemas
};